<?php

namespace App\Services;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;

class EnhancedPromptService
{
    private $ollamaService;
    private $knowledgeService;

    public function __construct(OllamaService $ollamaService, KnowledgeBaseService $knowledgeService)
    {
        $this->ollamaService = $ollamaService;
        $this->knowledgeService = $knowledgeService;
    }

    /**
     * Generar respuesta con prompts profesionales mejorados
     */
    public function generateProfessionalResponse(
        string $userMessage,
        string $userType = 'public',
        ?string $department = null,
        array $context = []
    ): array {

        // 1. Clasificar tipo de consulta
        $queryType = $this->classifyQuery($userMessage);

        // 2. Obtener prompt especializado
        $systemPrompt = $this->buildSpecializedPrompt($queryType, $userType, $department, $context);

        // 3. Preparar mensaje completo
        $fullPrompt = $this->buildFullPrompt($systemPrompt, $userMessage, $context);

        // 4. Generar respuesta con configuraci√≥n optimizada usando m√©todo Ociel
        $response = $this->ollamaService->generateOcielResponse($userMessage, $context, $userType, $department);

        // 5. Validar y mejorar respuesta
        if ($response['success']) {
            $enhancedResponse = $this->enhanceResponse($response['response'], $queryType, $context);
            $response['response'] = $enhancedResponse;
            
            // 6. Limpiar contactos falsos inventados por el modelo
            $response['response'] = $this->cleanFakeContacts($response['response'], $context);
            
            $response['confidence'] = $this->calculateAdvancedConfidence($response, $context, $userMessage);
        }

        return $response;
    }

    /**
     * Clasificar tipo de consulta autom√°ticamente
     */
    private function classifyQuery(string $message): string
    {
        $messageLower = strtolower($message);

        // Patrones de clasificaci√≥n
        $patterns = [
            'tramite_especifico' => [
                'patterns' => ['inscripci√≥n', 'inscripcion', 'titulaci√≥n', 'titulacion', 'revalidaci√≥n', 'equivalencia', 'certificado', 'constancia'],
                'confidence' => 0.9
            ],
            'informacion_carrera' => [
                'patterns' => ['carrera', 'licenciatura', 'programa', 'plan de estudios', 'requisitos de admisi√≥n'],
                'confidence' => 0.8
            ],
            'servicio_universitario' => [
                'patterns' => ['biblioteca', 'laboratorio', 'cafeter√≠a', 'transporte', 'enfermer√≠a', 'deporte'],
                'confidence' => 0.8
            ],
            'soporte_tecnico' => [
                'patterns' => ['sistema', 'plataforma', 'correo', 'contrase√±a', 'usuario', 'acceso', 'login'],
                'confidence' => 0.9
            ],
            'informacion_general' => [
                'patterns' => ['horario', 'ubicaci√≥n', 'direcci√≥n', 'tel√©fono', 'contacto'],
                'confidence' => 0.7
            ],
            'queja_problema' => [
                'patterns' => ['problema', 'queja', 'reclamo', 'error', 'falla', 'no funciona', 'molesto'],
                'confidence' => 0.9
            ],
            'consulta_academica' => [
                'patterns' => ['profesor', 'materia', 'calificaci√≥n', 'examen', 'tarea', 'clase'],
                'confidence' => 0.8
            ]
        ];

        $scores = [];
        foreach ($patterns as $type => $config) {
            $score = 0;
            foreach ($config['patterns'] as $pattern) {
                if (str_contains($messageLower, $pattern)) {
                    $score += $config['confidence'];
                }
            }
            if ($score > 0) {
                $scores[$type] = $score;
            }
        }

        return !empty($scores) ? array_key_first(arsort($scores) ? $scores : []) : 'consulta_general';
    }

    /**
     * Construir prompt especializado seg√∫n tipo de consulta
     */
    private function buildSpecializedPrompt(string $queryType, string $userType, ?string $department, array $context): string
    {
        $basePrompt = $this->getBaseInstitutionalPrompt();
        $specializedPrompt = $this->getSpecializedInstructions($queryType);
        $userContextPrompt = $this->getUserContextPrompt($userType, $department);
        $knowledgePrompt = $this->getKnowledgeContextPrompt($context);

        return implode("\n\n", array_filter([
            $basePrompt,
            $specializedPrompt,
            $userContextPrompt,
            $knowledgePrompt
        ]));
    }

    /**
     * Prompt institucional base con personalidad Ociel Senpai
     */
    private function getBaseInstitutionalPrompt(): string
    {
        return "Eres Ociel üêØ, el Agente Virtual Senpai de la Universidad Aut√≥noma de Nayarit (UAN).

üé≠ PERSONALIDAD DE OCIEL:
- Carism√°tico y alegre: Entusiasta, positivo, generas confianza desde el primer mensaje
- Protector y emp√°tico: Siempre buscas que la persona se sienta acompa√±ada y respaldada
- Claro y preciso: Brindas informaci√≥n completa y confiable, sin omitir datos importantes
- Accesible y cercano: Te comunicas como un compa√±ero solidario, sin tecnicismos
- Responsable: Mantienes tono amigable sin trivializar temas importantes
- Respetuoso: Diriges mensajes con amabilidad, manteniendo ambiente seguro

üíù VALORES QUE PROYECTAS: Apoyo, confianza, empat√≠a, responsabilidad y sentido de comunidad

üèõÔ∏è CONTEXTO INSTITUCIONAL:
La Universidad Aut√≥noma de Nayarit es una instituci√≥n p√∫blica de educaci√≥n superior de excelencia, comprometida con la formaci√≥n integral, la investigaci√≥n cient√≠fica y el desarrollo regional de Nayarit, M√©xico.

üìù ESTRUCTURA REQUERIDA (ESTILO SENPAI DIGITAL):
1. SALUDO CARISM√ÅTICO Y EMP√ÅTICO (1 l√≠nea con emoji üêØ o relacionado)
2. INFORMACI√ìN PRINCIPAL CLARA Y CERCANA (2-3 p√°rrafos cortos, tono de compa√±ero)
3. PASOS/REQUISITOS ORGANIZADOS (lista con guiones simples, lenguaje accesible)
4. CONTACTO ESPEC√çFICO + OFERTA DE APOYO CONTINUO (con emoji üêæ o similar)

üí¨ FRASES CARACTER√çSTICAS DE OCIEL:
- Aperturas: '¬°Claro que s√≠!' | '¬°Perfecto!' | 'Te ayudo con eso üêØ'
- Transiciones: 'Te cuento...' | 'Es s√∫per f√°cil...' | 'Los pasos son claros:'
- Cierres: '¬øNecesitas algo m√°s?' | 'Estoy aqu√≠ para apoyarte üêæ' | 'Aqu√≠ estar√© para lo que necesites'

üó£Ô∏è REGLAS DE TONO Y ESTILO:
- Lenguaje claro, c√°lido y directo: Evita tecnicismos y expresiones institucionales fr√≠as
- Frases completas y correctas: Sin modismos (evita 'pa'', 'ta' bien', '√≥rale')
- Amable en cualquier situaci√≥n: Mant√©n tono de apoyo incluso en temas formales
- Emojis moderados y estrat√©gicos: √ösalos para reforzar calidez, sin saturar
- Disposici√≥n a seguir apoyando: Siempre muestra que est√°s disponible para m√°s ayuda";
    }

    /**
     * Instrucciones especializadas por tipo de consulta - FORMATO MEJORADO
     */
    private function getSpecializedInstructions(string $queryType): string
    {
        $instructions = [
            'tramite_especifico' => "üéì ESPECIALIZACI√ìN EN TR√ÅMITES ACAD√âMICOS:

Como experto en procedimientos universitarios, proporciona:

ESTRUCTURA OBLIGATORIA:
1. Confirmaci√≥n del tr√°mite solicitado
2. Requisitos principales (m√°ximo 10 puntos)
3. Proceso paso a paso (m√°ximo 10 pasos)
4. Informaci√≥n de contacto espec√≠fica
5. Tiempo estimado si est√° disponible

FORMATO DE RESPUESTA:
- P√°rrafos cortos y directos
- Listas con guiones simples (-)
- Un contacto espec√≠fico por respuesta
- Lenguaje claro sin tecnicismos innecesarios",

            'informacion_carrera' => "üéì ESPECIALIZACI√ìN EN OFERTA ACAD√âMICA:

Como consejero acad√©mico experto, incluye:

ESTRUCTURA PARA CARRERAS:
1. Saludo y confirmaci√≥n de la carrera
2. Informaci√≥n b√°sica (duraci√≥n, modalidad)
3. Perfil de ingreso principal
4. Campo laboral general
5. Contacto para m√°s informaci√≥n

FORMATO ESPEC√çFICO:
- M√°ximo 4 p√°rrafos
- Informaci√≥n esencial solamente
- Evitar listas largas
- Contacto directo al final",

            'servicio_universitario' => "üèõÔ∏è ESPECIALIZACI√ìN EN SERVICIOS:

Como gu√≠a de servicios universitarios:

ESTRUCTURA DE RESPUESTA:
1. Descripci√≥n breve del servicio
2. Ubicaci√≥n y horarios b√°sicos
3. C√≥mo acceder al servicio
4. Contacto espec√≠fico

FORMATO:
- Informaci√≥n pr√°ctica y directa
- Horarios en formato simple
- Un solo contacto relevante",

            'soporte_tecnico' => "üíª MODO CONVERSACIONAL - SERVICIOS TECNOL√ìGICOS:

‚ùå FORMATO PROHIBIDO:
- NO usar markdown visible: ### Descripci√≥n, **Campo:**
- NO mostrar estructura con headers
- NO usar listas con emojis y campos separados como:
  üìã Informaci√≥n encontrada:
  ### Descripci√≥n
  **Usuarios:** ...
  **Modalidad:** ...
  ### Contacto

‚úÖ FORMATO REQUERIDO - CONVERSACI√ìN NATURAL:
Respuesta completamente conversacional que integre:
- Saludo natural
- Explicaci√≥n del servicio en p√°rrafos fluidos
- Informaci√≥n de usuarios, modalidad, dependencia mencionada naturalmente
- Contacto integrado al final solo si est√° en contexto
- Pregunta de seguimiento

**EJEMPLO CORRECTO:**
'¬°Hola! Te ayudo con el servicio de correo electr√≥nico institucional. Este servicio permite a los estudiantes activar autom√°ticamente su cuenta de email universitario. Lo maneja la Direcci√≥n de Sistemas y funciona completamente en l√≠nea, as√≠ que puedes hacerlo desde cualquier lugar. ¬øTienes alg√∫n problema espec√≠fico con la activaci√≥n?'

‚ùå NUNCA uses formato estructurado visible",

            'queja_problema' => "üõ°Ô∏è ESPECIALIZACI√ìN EN ATENCI√ìN DE PROBLEMAS:

Modo de atenci√≥n prioritaria:

ESTRUCTURA EMP√ÅTICA:
1. Reconocimiento de la situaci√≥n
2. Disculpa institucional si corresponde
3. Escalaci√≥n inmediata a autoridades
4. Seguimiento garantizado

TONO:
- Emp√°tico pero profesional
- Escalaci√≥n r√°pida
- Contacto directo de supervisi√≥n",

            'consulta_academica' => "üéì ESPECIALIZACI√ìN ACAD√âMICA:

Como asesor acad√©mico:

ESTRUCTURA:
1. Confirmaci√≥n de la consulta acad√©mica
2. Informaci√≥n general disponible
3. Contacto de coordinaci√≥n acad√©mica
4. Recursos adicionales si aplican

FORMATO:
- Informaci√≥n acad√©mica espec√≠fica
- Contacto directo con coordinaci√≥n"
        ];

        return $instructions[$queryType] ??
            "ü§ñ MODO CONVERSACIONAL - CONSULTA GENERAL:

‚ùå FORMATO ABSOLUTAMENTE PROHIBIDO:
- NO mostrar: üìã Informaci√≥n encontrada:
- NO usar: ### Descripci√≥n, **Campo:**, **Modalidad:**
- NO estructurar con headers visibles
- NO usar listas de campos con emojis

‚úÖ FORMATO OBLIGATORIO - RESPUESTA NATURAL:
- Conversaci√≥n fluida como asistente humano
- Informaci√≥n integrada en p√°rrafos naturales  
- Datos mencionados conversacionalmente
- Sin formato markdown visible

**EJEMPLOS CORRECTOS:**

**SI HAY INFORMACI√ìN COMPLETA:**
'¬°Hola! Te puedo ayudar con el servicio de activaci√≥n de correo. Este servicio permite a los estudiantes de la universidad activar autom√°ticamente su cuenta de email institucional. Lo maneja la Direcci√≥n de Sistemas y funciona completamente en l√≠nea, por lo que puedes hacerlo desde cualquier dispositivo. ¬øNecesitas ayuda con alg√∫n paso en particular?'

**SI FALTA INFORMACI√ìN:**
'¬°Hola! Encontr√© informaci√≥n sobre ese servicio, pero no tengo todos los detalles espec√≠ficos en este momento. Te recomiendo consultar directamente con la universidad para obtener informaci√≥n completa y actualizada. ¬øHay algo espec√≠fico que te gustar√≠a saber?'

‚ùå REGLAS CR√çTICAS: 
- NUNCA muestres estructura markdown
- NO inventes procedimientos detallados
- RESPUESTA CORTA Y REAL mejor que larga e inventada
- Conversaci√≥n natural, no formato t√©cnico";
    }

    /**
     * Prompt de contexto de usuario - SIMPLIFICADO
     */
    private function getUserContextPrompt(string $userType, ?string $department): string
    {
        $userProfiles = [
            'student' => "üë®‚Äçüéì USUARIO: ESTUDIANTE
Enf√≥cate en: tr√°mites estudiantiles, servicios acad√©micos, fechas importantes.
Lenguaje: claro y directo, sin exceso de formalidad.",

            'employee' => "üë©‚Äçüíº USUARIO: EMPLEADO UNIVERSITARIO
Enf√≥cate en: procedimientos internos, normativas, canales administrativos.
Lenguaje: t√©cnico apropiado, informaci√≥n espec√≠fica.",

            'public' => "üåü USUARIO: P√öBLICO GENERAL
Enf√≥cate en: informaci√≥n general, oferta educativa, servicios p√∫blicos.
Lenguaje: accesible y explicativo, contexto institucional."
        ];

        $departmentContext = $department ? "\nüèõÔ∏è DEPARTAMENTO DE INTER√âS: {$department}" : "";

        return ($userProfiles[$userType] ?? $userProfiles['public']) . $departmentContext;
    }

    /**
     * Prompt de contexto de knowledge base - SIMPLIFICADO
     */
    private function getKnowledgeContextPrompt(array $context): string
    {
        if (empty($context)) {
            return "‚ö†Ô∏è CONTEXTO: Sin informaci√≥n espec√≠fica en base de conocimientos.
ACCI√ìN: Proporciona informaci√≥n general confiable y deriva a contactos apropiados.";
        }

        $contextText = "üìö INFORMACI√ìN OFICIAL DISPONIBLE:\n";
        foreach (array_slice($context, 0, 2) as $i => $item) {
            $contextText .= "FUENTE " . ($i + 1) . ": " . substr($item, 0, 200) . "...\n";
        }

        return $contextText . "\n‚úÖ INSTRUCCI√ìN CR√çTICA: Usa √öNICAMENTE esta informaci√≥n oficial. NO inventes ni agregues datos de contacto, costos, horarios o procedimientos que no est√©n en el contexto. Si no tienes informaci√≥n espec√≠fica, dilo claramente y deriva al usuario a consultar directamente con la instituci√≥n.";
    }

    /**
     * Construir prompt completo - FORMATO MEJORADO
     */
    private function buildFullPrompt(string $systemPrompt, string $userMessage, array $context): string
    {
        return "{$systemPrompt}

üì© CONSULTA DEL USUARIO:
\"{$userMessage}\"

üéØ FORMATO DE TU RESPUESTA:
- Saludo apropiado y breve
- Informaci√≥n principal (m√°ximo 3 p√°rrafos cortos)
- Contacto espec√≠fico con tel√©fono/email
- Pregunta de seguimiento si corresponde

üö´ NO HAGAS:
- Listas largas con muchos elementos
- P√°rrafos extensos
- Informaci√≥n no verificada
- M√∫ltiples contactos en una respuesta

¬°Responde como Ociel, el asistente m√°s confiable de la UAN!";
    }

    /**
     * Seleccionar modelo √≥ptimo seg√∫n tipo de consulta
     */
    private function selectOptimalModel(string $queryType): string
    {
        $modelMapping = [
            'tramite_especifico' => config('services.ollama.primary_model'),
            'informacion_carrera' => config('services.ollama.primary_model'),
            'queja_problema' => config('services.ollama.primary_model'),
            'consulta_academica' => config('services.ollama.primary_model'),
            'soporte_tecnico' => config('services.ollama.secondary_model'),
            'servicio_universitario' => config('services.ollama.secondary_model'),
            'informacion_general' => config('services.ollama.secondary_model')
        ];

        return $modelMapping[$queryType] ?? config('services.ollama.primary_model');
    }

    /**
     * Obtener temperatura √≥ptima
     */
    private function getOptimalTemperature(string $queryType): float
    {
        $temperatureMapping = [
            'tramite_especifico' => 0.1, // M√°xima precisi√≥n
            'soporte_tecnico' => 0.2,
            'informacion_carrera' => 0.2,
            'queja_problema' => 0.2,
            'consulta_academica' => 0.3,
            'servicio_universitario' => 0.3,
            'informacion_general' => 0.4
        ];

        return $temperatureMapping[$queryType] ?? 0.2;
    }

    /**
     * Obtener cantidad √≥ptima de tokens
     */
    private function getOptimalTokens(string $queryType): int
    {
        $tokenMapping = [
            'tramite_especifico' => 600, // Respuestas concisas pero completas
            'informacion_carrera' => 500,
            'queja_problema' => 400,
            'consulta_academica' => 500,
            'soporte_tecnico' => 350,
            'servicio_universitario' => 450,
            'informacion_general' => 400
        ];

        return $tokenMapping[$queryType] ?? 450;
    }

    /**
     * Mejorar respuesta post-generaci√≥n - FORMATO CORREGIDO
     */
    private function enhanceResponse(string $response, string $queryType, array $context): string
    {
        // 1. Limpiar formato problem√°tico
        $response = $this->cleanResponseFormat($response);

        // 2. Agregar informaci√≥n de contacto si no est√° presente
        if (!$this->containsContactInfo($response)) {
            $contactInfo = $this->getRelevantContactInfo($queryType);
            $response .= "\n\n" . $contactInfo;
        }

        // 3. Agregar llamada a la acci√≥n apropiada
        $response .= "\n\n" . $this->getCallToAction($queryType);

        return $response;
    }

    /**
     * Limpiar formato de respuesta para conversaci√≥n natural
     */
    private function cleanResponseFormat(string $response): string
    {
        // 1. ELIMINAR COMPLETAMENTE formato markdown estructurado
        $response = preg_replace('/üìã\s*Informaci√≥n encontrada:\s*/i', '', $response);
        $response = preg_replace('/^#{1,6}\s*(.+)$/m', '$1', $response); // Quitar headers
        $response = preg_replace('/^\*\*([^*]+)\*\*:\s*/m', '', $response); // Quitar campos en negritas
        
        // 2. Eliminar secciones estructuradas espec√≠ficas
        $response = preg_replace('/### Descripci√≥n\s*/i', '', $response);
        $response = preg_replace('/### Contacto\s*/i', '', $response);
        $response = preg_replace('/\*\*Modalidad:\*\*/i', '', $response);
        $response = preg_replace('/\*\*Usuarios:\*\*/i', '', $response);
        $response = preg_replace('/\*\*Dependencia:\*\*/i', '', $response);
        $response = preg_replace('/\*\*Estado:\*\*/i', '', $response);
        $response = preg_replace('/\*\*Costo:\*\*/i', '', $response);

        // 3. Convertir listas estructuradas a texto fluido
        $response = preg_replace('/^\* /m', '', $response);
        $response = preg_replace('/^- /m', '', $response);

        // 4. Limpiar m√∫ltiples saltos de l√≠nea
        $response = preg_replace('/\n{3,}/', "\n\n", $response);

        // 5. Eliminar l√≠neas vac√≠as resultantes
        $response = preg_replace('/^\s*$/m', '', $response);
        $response = preg_replace('/\n{2,}/', "\n\n", $response);

        return trim($response);
    }

    /**
     * Calcular confianza avanzada
     */
    private function calculateAdvancedConfidence(array $response, array $context, string $originalQuery): float
    {
        $confidence = 0.0;

        // Base por contexto disponible
        if (!empty($context)) {
            $confidence += 0.4;
        }

        // Por √©xito de generaci√≥n
        if ($response['success']) {
            $confidence += 0.3;
        }

        // Por longitud apropiada de respuesta
        $responseLength = strlen($response['response'] ?? '');
        if ($responseLength > 50 && $responseLength < 800) {
            $confidence += 0.2;
        }

        // Por presencia de informaci√≥n estructurada
        if ($this->hasStructuredInfo($response['response'] ?? '')) {
            $confidence += 0.1;
        }

        return min(1.0, $confidence);
    }

    /**
     * Verificar si contiene informaci√≥n de contacto del contexto
     */
    private function containsContactInfo(string $text): bool
    {
        return preg_match('/üìû|üìß|tel√©fono|correo|contacto/i', $text);
    }

    /**
     * Verificar si tiene informaci√≥n estructurada
     */
    private function hasStructuredInfo(string $text): bool
    {
        $patterns = [
            '/requisitos?/i',
            '/pasos?/i',
            '/procedimiento/i',
            '/contacto/i'
        ];

        $matches = 0;
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $text)) {
                $matches++;
            }
        }

        return $matches >= 2;
    }

    /**
     * Obtener informaci√≥n de contacto relevante - SOLO DE NOTION
     */
    private function getRelevantContactInfo(string $queryType): string
    {
        // NO agregar informaci√≥n de contacto hardcodeada
        // El contacto debe venir √öNICAMENTE del contexto de Notion
        return "";
    }

    /**
     * Obtener llamada a la acci√≥n apropiada
     */
    private function getCallToAction(string $queryType): string
    {
        $ctaMapping = [
            'tramite_especifico' => "¬øNecesitas informaci√≥n sobre alg√∫n requisito espec√≠fico?",
            'informacion_carrera' => "¬øTe interesa conocer m√°s sobre alguna carrera en particular?",
            'soporte_tecnico' => "¬øEl problema persiste o necesitas ayuda con algo m√°s?",
            'queja_problema' => "¬øHay algo m√°s en lo que pueda asistirte?",
            'servicio_universitario' => "¬øQuieres informaci√≥n sobre alg√∫n otro servicio?"
        ];

        return $ctaMapping[$queryType] ?? "¬øEn qu√© m√°s puedo ayudarte?";
    }

    /**
     * Limpiar contactos falsos inventados por el modelo
     */
    private function cleanFakeContacts(string $response, array $context): string
    {
        // ESTRATEGIA SIMPLE: Eliminar TODOS los contactos inventados comunes
        
        // Eliminar CUALQUIER n√∫mero de tel√©fono que parezca inventado
        // Patrones comunes: 3XX XXX XXXX, 3XX-XXX-XXXX, +52 3XX XXX XXXX
        $response = preg_replace('/\+?52\s?3\d{2}[-\s]?\d{3}[-\s]?\d{2,4}/', '', $response);
        $response = preg_replace('/3\d{2}[-\s]?\d{3}[-\s]?\d{2,4}/', '', $response);
        $response = preg_replace('/311[-\s]?211[-\s]?8800/', '', $response);
        
        // Eliminar CUALQUIER email @uan.edu.mx que parezca inventado
        $response = preg_replace('/\[?[a-zA-Z0-9._-]+@uan\.edu\.mx\]?/', '', $response);
        $response = preg_replace('/mailto:[a-zA-Z0-9._-]+@uan\.edu\.mx/', '', $response);
        
        // Limpiar l√≠neas que quedaron vac√≠as o solo con texto de enlace
        $response = preg_replace('/.*\[?\]?\(mailto:\).*$/m', '', $response);
        $response = preg_replace('/.*al tel√©fono\s*o por correo electr√≥nico\s*\..*$/m', '', $response);
        $response = preg_replace('/.*puedes contactar.*al tel√©fono\s*y por correo.*$/m', '', $response);
        $response = preg_replace('/.*\[.*\]\(mailto:.*\).*$/m', '', $response);
        
        // Eliminar placeholders inventados
        $response = preg_replace('/\[direcci√≥n completa\]/', '', $response);
        $response = preg_replace('/\[n√∫mero de tel√©fono\]/', '', $response);
        $response = preg_replace('/\[direcci√≥n de correo electr√≥nico\]/', '', $response);
        $response = preg_replace('/\[ubicaci√≥n espec√≠fica\]/', '', $response);
        $response = preg_replace('/al tel√©fono\s*y por correo electr√≥nico/', '', $response);
        
        // Eliminar n√∫meros de tel√©fono inventados espec√≠ficos
        $response = preg_replace('/\(55 5555 5555\)/', '', $response);
        $response = preg_replace('/55 5555 5555/', '', $response);
        $response = preg_replace('/\(555\) 555-5555/', '', $response);
        
        // Eliminar listas de pasos inventados comunes
        $response = preg_replace('/1\.\s*Accede a la p√°gina.*?\n/', '', $response);
        $response = preg_replace('/2\.\s*Ingresa tus datos.*?\n/', '', $response);
        $response = preg_replace('/3\.\s*Recibir√°s un correo.*?\n/', '', $response);
        $response = preg_replace('/4\.\s*Sigue las instrucciones.*?\n/', '', $response);
        
        // Eliminar frases que indican procedimientos inventados
        $response = preg_replace('/Para activar tu cuenta, debes seguir los siguientes pasos:/', 'Para m√°s informaci√≥n sobre el proceso de activaci√≥n, consulta directamente con la instituci√≥n.', $response);
        
        // Limpiar ubicaciones inventadas espec√≠ficas
        $response = preg_replace('/,\s*ubicado en la calle\s*,/', ',', $response);
        $response = preg_replace('/,\s*ubicado en la calle\s*\./', '.', $response);
        $response = preg_replace('/,\s*ubicada en el edificio de.*?\./', '.', $response);
        $response = preg_replace('/,\s*ubicado en el edificio de.*?\./', '.', $response);
        $response = preg_replace('/en la plaza principal de la universidad/', '', $response);
        $response = preg_replace('/en el campus principal/', '', $response);
        $response = preg_replace('/All√≠ podr√°s presentar tu solicitud.*?\./', '', $response);
        $response = preg_replace('/All√≠.*?activaci√≥n.*?\./', '', $response);
        
        // Si despu√©s de limpiar queda una secci√≥n de contacto vac√≠a, eliminarla
        $response = preg_replace('/\*\*Contacto\*\*\s*\n\n/', '', $response);
        $response = preg_replace('/\*\*.*[Cc]ontacto.*\*\*\s*\n*$/', '', $response);
        
        // Limpiar l√≠neas vac√≠as m√∫ltiples
        $response = preg_replace('/\n{3,}/', "\n\n", $response);
        
        return trim($response);
    }
}
